unit Unit5;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, UMain, DB, ADODB, ComCtrls, ToolWin, Grids,
  DBGrids, oleserver, comobj, ExcelXP;

type
  TForm6 = class(TForm)
    ADOQuery1: TADOQuery;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    GroupBox1: TGroupBox;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet3: TTabSheet;
    GroupBox3: TGroupBox;
    DateTimePicker5: TDateTimePicker;
    DateTimePicker6: TDateTimePicker;
    ComboBox2: TComboBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    DateTimePicker1: TDateTimePicker;
    Label4: TLabel;
    DateTimePicker2: TDateTimePicker;
    DataSource1: TDataSource;
    Panel1: TPanel;
    DBGrid1: TDBGrid;
    Label7: TLabel;
    Label8: TLabel;
    ADOQuery2: TADOQuery;
    ADOQuery3: TADOQuery;
    ADOQuery4: TADOQuery;
    Label10: TLabel;
    Label11: TLabel;
    TabSheet4: TTabSheet;
    Panel2: TPanel;
    DBGrid2: TDBGrid;
    DataSourceSelect: TDataSource;
    ADOQuerySelect: TADOQuery;
    GroupBox4: TGroupBox;
    Label9: TLabel;
    Label12: TLabel;
    Label14: TLabel;
    DateTimePicker7: TDateTimePicker;
    DateTimePicker8: TDateTimePicker;
    Label13: TLabel;
    Label15: TLabel;
    ComboBox6: TComboBox;
    Label16: TLabel;
    ComboBox8: TComboBox;
    Button1: TButton;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    Label20: TLabel;
    Label21: TLabel;
    Label22: TLabel;
    ComboBox9: TComboBox;
    Label23: TLabel;
    Label25: TLabel;
    ComboBox3: TComboBox;
    ADOQueryCall: TADOQuery;
    ComboBox4: TComboBox;
    Label24: TLabel;
    ComboBox5: TComboBox;
    Label26: TLabel;
    DBGrid3: TDBGrid;
    DataSourceCall: TDataSource;
    procedure ToolButton3Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ToolButton1Click(Sender: TObject);
    procedure ComboBox4DropDown(Sender: TObject);
    procedure ComboBox5DropDown(Sender: TObject);
    procedure DBGrid2DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure ComboBox6DropDown(Sender: TObject);
    procedure ComboBox8DropDown(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure ToolButton2Click(Sender: TObject);
    Function ExportToExcel(oDataSet : TDataSet; sFile : String): Boolean;
    procedure ComboBox3DropDown(Sender: TObject);
    procedure ExportDBGrid(toExcel: Boolean);
    procedure ExportDBGrid2(toExcel: Boolean);
    procedure ExportDBGrid3(toExcel: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form6: TForm6;
  aqs : String;



implementation

uses Unit8, Unit17, Unit18;

{$R *.dfm}

procedure TForm6.Button1Click(Sender: TObject);
begin
  ADOQuerySelect.Close;
  ADOQuerySelect.SQL.Clear;
  ComboBox6.Text := '';
  ComboBox8.Text := '';
  ADOQuerySelect.SQL.Text := aqs;
  ADOQuerySelect.Open;
end;

procedure TForm6.ComboBox3DropDown(Sender: TObject);
var
  i: Integer;
begin
// Заполнение combobox
  ADOQueryCall.first;
  for i := 1 to ADOQueryCall.RecordCount do
  begin
  if ADOQueryCall.FieldByName('Фамилия').Value <> null then
     if ComboBox3.Items.IndexOf(ADOQueryCall.FieldByName('Фамилия').Value) = -1 then
        ComboBox3.Items.Add(ADOQueryCall.FieldByName('Фамилия').Value);
      ADOQueryCall.Next;
  end;
end;

procedure TForm6.ComboBox4DropDown(Sender: TObject);
var
  i: Integer;
begin
  // Заполнение combobox
  ADOQuery3.first;
  for i := 1 to ADOQuery3.RecordCount do
  begin
  if ADOQuery3.FieldByName('Фамилия').Value <> null then
     if ComboBox4.Items.IndexOf(ADOQuery3.FieldByName('Фамилия').Value) = -1 then
        ComboBox4.Items.Add(ADOQuery3.FieldByName('Фамилия').Value);
      ADOQuery3.Next;
  end;
end;

procedure TForm6.ComboBox5DropDown(Sender: TObject);
var
  i: Integer;
begin
// Заполнение combobox
  ADOQuery4.first;
  for i := 1 to ADOQuery4.RecordCount do
  begin
  if ADOQuery4.FieldByName('Имя_услуга').Value <> null then

       if ComboBox5.Items.IndexOf(ADOQuery4.FieldByName('Имя_услуга').Value) = -1 then
            ComboBox5.Items.Add(ADOQuery4.FieldByName('Имя_услуга').Value);
      ADOQuery4.Next;
  end;
end;

procedure TForm6.ComboBox6DropDown(Sender: TObject);
var
  i: Integer;
begin
// Заполнение combobox
  ADOQuerySelect.first;
  for i := 1 to ADOQuerySelect.RecordCount do
  begin
  if ADOQuerySelect.FieldByName('Наименование').Value <> null then
     if ComboBox6.Items.IndexOf(ADOQuerySelect.FieldByName('Наименование').Value) = -1 then
        ComboBox6.Items.Add(ADOQuerySelect.FieldByName('Наименование').Value);
      ADOQuerySelect.Next;
  end;
end;

procedure TForm6.ComboBox8DropDown(Sender: TObject);
var
  i: Integer;
begin
// Заполнение combobox
  ADOQuerySelect.first;
  for i := 1 to ADOQuerySelect.RecordCount do
  begin
  if ADOQuerySelect.FieldByName('Фамилия').Value <> null then
     if ComboBox8.Items.IndexOf(ADOQuerySelect.FieldByName('Фамилия').Value) = -1 then
        ComboBox8.Items.Add(ADOQuerySelect.FieldByName('Фамилия').Value);
      ADOQuerySelect.Next;
  end;
end;

procedure TForm6.DBGrid2DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
if Column.FieldName = 'По абонементу' then
      if ADOQuerySelect.FieldByName('По абонементу').Text = 'True' then
       DBGrid2.Canvas.Brush.Color := ClLime;
    DBGrid2.DefaultDrawColumnCell(Rect, DataCol, Column, State);
if  (Column.FieldName='По абонементу')  then begin
  with  DBGrid2.Canvas do begin
  Brush.Color:=clWhite;
  FillRect(Rect);
  //Font.Name:='Wingdings';
  //Font.Size:=-14;
if (ADOQuerySelect.FieldByName('По абонементу').Value= True) then begin
  Font.Color:=clblack;
  TextOut(Rect.Right-2-
  DBGrid2.Canvas.TextWidth('Да'),
  Rect.Top+1,'Да');
end else begin
 Font.Color:=clBlack;
 TextOut(Rect.Right-2- DBGrid2.Canvas.TextWidth('Нет'),
  Rect.Top+1,'Нет');
end;
end;
end;
end;

procedure TForm6.ExportDBGrid(toExcel: Boolean);
var
 bm: TBookmark;
 col, row: Integer;
 sline: string;
 mem: TMemo;
 ExcelApp: Variant;
begin
  Screen.Cursor := crHourglass;
  DBGrid1.DataSource.DataSet.DisableControls;
  bm := DBGrid1.DataSource.DataSet.GetBookmark;
  DBGrid1.DataSource.DataSet.First;

  // создаём объект Excel
  if toExcel then
  begin
    ExcelApp := CreateOleObject('Excel.Application');
    ExcelApp.WorkBooks.Add(1);
    ExcelApp.WorkBooks[1].WorkSheets[1].name := 'Отчет о выручке';
  end;

  // Сперва отправляем данные в memo
  // работает быстрее, чем отправлять их напрямую в Excel
  mem := TMemo.Create(Self);
  mem.Visible := false;
  mem.Parent := Form6;
  mem.Clear;
  sline := '';

  // добавляем информацию для имён колонок
  for col := 0 to DBGrid1.FieldCount-1 do
    sline := sline + DBGrid1.Fields[col].DisplayLabel + #9;
  mem.Lines.Add(sline);

  // получаем данные из memo
  for row := 0 to DBGrid1.DataSource.DataSet.RecordCount-1 do
  begin
    sline := '';
    for col := 0 to DBGrid1.FieldCount-1 do
      sline := sline + DBGrid1.Fields[col].AsString + #9;
    mem.Lines.Add(sline);
    DBGrid1.DataSource.DataSet.Next;
  end;

  // копируем данные в clipboard
  mem.SelectAll;
  mem.CopyToClipboard;

  // если необходимо, то отправляем их в Excel
  // если нет, то они уже в буфере обмена
  if toExcel then
  try
  begin
    ExcelApp.workbooks[1].worksheets[1].columns[1].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[2].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[3].columnwidth:=10;
    ExcelApp.Workbooks[1].WorkSheets['Отчет о выручке'].Paste;
    ExcelApp.Visible := true;
  end;
  except

  end;

  //FreeAndNil(ExcelApp);
  DBGrid1.DataSource.DataSet.GotoBookmark(bm);
  DBGrid1.DataSource.DataSet.FreeBookmark(bm);
  DBGrid1.DataSource.DataSet.EnableControls;
  Screen.Cursor := crDefault;

end;

procedure TForm6.ExportDBGrid2(toExcel: Boolean);
var
 bm: TBookmark;
 col, row: Integer;
 sline: string;
 mem: TMemo;
 ExcelApp: Variant;
begin
  Screen.Cursor := crHourglass;
  DBGrid3.DataSource.DataSet.DisableControls;
  bm := DBGrid3.DataSource.DataSet.GetBookmark;
  DBGrid3.DataSource.DataSet.First;

  // создаём объект Excel
  if toExcel then
  begin
    ExcelApp := CreateOleObject('Excel.Application');
    ExcelApp.WorkBooks.Add(1);
    ExcelApp.WorkBooks[1].WorkSheets[1].name := 'Спрос';
  end;

  // Сперва отправляем данные в memo
  // работает быстрее, чем отправлять их напрямую в Excel
  mem := TMemo.Create(Self);
  mem.Visible := false;
  mem.Parent := Form6;
  mem.Clear;
  sline := '';

  // добавляем информацию для имён колонок
  for col := 0 to DBGrid3.FieldCount-1 do
    sline := sline + DBGrid3.Fields[col].DisplayLabel + #9;
  mem.Lines.Add(sline);

  // получаем данные из memo
  for row := 0 to DBGrid3.DataSource.DataSet.RecordCount-1 do
  begin
    sline := '';
    for col := 0 to DBGrid3.FieldCount-1 do
      sline := sline + DBGrid3.Fields[col].AsString + #9;
    mem.Lines.Add(sline);
    DBGrid3.DataSource.DataSet.Next;
  end;

  // копируем данные в clipboard
  mem.SelectAll;
  mem.CopyToClipboard;

  // если необходимо, то отправляем их в Excel
  // если нет, то они уже в буфере обмена
  if toExcel then
  try
  begin
    ExcelApp.workbooks[1].worksheets[1].columns[1].columnwidth:=12;
    ExcelApp.workbooks[1].worksheets[1].columns[2].columnwidth:=20;
    ExcelApp.workbooks[1].worksheets[1].columns[3].columnwidth:=10;
    ExcelApp.Workbooks[1].WorkSheets['Спрос'].Paste;
    ExcelApp.Visible := true;
  end;
  except

  end;

  //FreeAndNil(ExcelApp);
  DBGrid3.DataSource.DataSet.GotoBookmark(bm);
  DBGrid3.DataSource.DataSet.FreeBookmark(bm);
  DBGrid3.DataSource.DataSet.EnableControls;
  Screen.Cursor := crDefault;


end;

procedure TForm6.ExportDBGrid3(toExcel: Boolean);
var
 bm: TBookmark;
 col, row: Integer;
 sline: string;
 mem: TMemo;
 ExcelApp: Variant;
begin
  Screen.Cursor := crHourglass;
  DBGrid2.DataSource.DataSet.DisableControls;
  bm := DBGrid2.DataSource.DataSet.GetBookmark;
  DBGrid2.DataSource.DataSet.First;

  // создаём объект Excel
  if toExcel then
  begin
    ExcelApp := CreateOleObject('Excel.Application');
    ExcelApp.WorkBooks.Add(1);
    ExcelApp.WorkBooks[1].WorkSheets[1].name := 'Отбор данных';
  end;

  // Сперва отправляем данные в memo
  // работает быстрее, чем отправлять их напрямую в Excel
  mem := TMemo.Create(Self);
  mem.Visible := false;
  mem.Parent := Form6;
  mem.Clear;
  sline := '';

  // добавляем информацию для имён колонок
  for col := 0 to DBGrid2.FieldCount-1 do
    sline := sline + DBGrid2.Fields[col].DisplayLabel + #9;
  mem.Lines.Add(sline);

  // получаем данные из memo
  for row := 0 to DBGrid2.DataSource.DataSet.RecordCount-1 do
  begin
    sline := '';
    for col := 0 to DBGrid2.FieldCount-1 do
      sline := sline + DBGrid2.Fields[col].AsString + #9;
    mem.Lines.Add(sline);
    DBGrid2.DataSource.DataSet.Next;
  end;

  // копируем данные в clipboard
  mem.SelectAll;
  mem.CopyToClipboard;

  // если необходимо, то отправляем их в Excel
  // если нет, то они уже в буфере обмена
  if toExcel then
  try
  begin
    ExcelApp.workbooks[1].worksheets[1].columns[1].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[2].columnwidth:=30;
    ExcelApp.workbooks[1].worksheets[1].columns[3].columnwidth:=15;
    ExcelApp.workbooks[1].worksheets[1].columns[4].columnwidth:=15;
    ExcelApp.workbooks[1].worksheets[1].columns[5].columnwidth:=15;
    ExcelApp.workbooks[1].worksheets[1].columns[6].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[7].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[8].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[9].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[10].columnwidth:=10;
    ExcelApp.workbooks[1].worksheets[1].columns[11].columnwidth:=10;
    ExcelApp.Workbooks[1].WorkSheets['Отбор данных'].Paste;
    ExcelApp.Visible := true;
  end;
  except

  end;

  //FreeAndNil(ExcelApp);
  DBGrid2.DataSource.DataSet.GotoBookmark(bm);
  DBGrid2.DataSource.DataSet.FreeBookmark(bm);
  DBGrid2.DataSource.DataSet.EnableControls;
  Screen.Cursor := crDefault;

end;

function TForm6.ExportToExcel(oDataSet: TDataSet; sFile: String): Boolean;
var
  iCol,iRow : Integer;
  oExcel : TExcelApplication;
  oWorkbook : TExcelWorkbook;
  oSheet : TExcelWorksheet;
begin
iCol := 0;
iRow := 0;
result := True;

oExcel := TExcelApplication.Create(Application);
oWorkbook := TExcelWorkbook.Create(Application);
oSheet := TExcelWorksheet.Create(Application);

try
oExcel.Visible[0] := False;
oExcel.Connect;
except
result := False;
MessageDlg('Excel may not be installed', mtError, [mbOk], 0);
exit;
end;

oExcel.Visible[0] := True;
oExcel.Caption := 'Отчет';
oExcel.Workbooks.Add(Null,0);

oWorkbook.ConnectTo(oExcel.Workbooks[1]);
oSheet.ConnectTo(oWorkbook.Worksheets[1] as _Worksheet);

iRow := 1;

for iCol:=1 to oDataSet.FieldCount  do begin
 oSheet.Cells.Item[iRow,iCol] := oDataSet.FieldDefs.Items[iCol].Name;
 oSheet.Cells.Item[iRow,iCol] := oDataSet.Fields[iCol-1].FieldName;
end;

 iRow := 2;

oDataSet.Open;
while NOT oDataSet.Eof do begin
Inc(iRow);

for iCol:=1 to oDataSet.FieldCount do begin
oSheet.Cells.Item[iRow,iCol] := oDataSet.Fields[iCol-1].AsString;
end;

oDataSet.Next;
end;

//Change the wprksheet name.
oSheet.Name := 'Отчет';

//Change the font properties of all columns.
{
  oSheet.Columns.Font.Color := clPurple;
  oSheet.Columns.Font.FontStyle := fsBold;
  oSheet.Columns.Font.Size := 10;
}

//Change the font properties of a row.
{
  oSheet.Range['A1','A1'].EntireRow.Font.Color := clNavy;
  oSheet.Range['A1','A1'].EntireRow.Font.Size := 16;
  oSheet.Range['A1','A1'].EntireRow.Font.FontStyle := fsBold;
  oSheet.Range['A1','A1'].EntireRow.Font.Name := 'Arabic Transparent';
}

//Change the font properties of a row.
{
  oSheet.Range['A2','A2'].EntireRow.Font.Color := clBlue;
  oSheet.Range['A2','A2'].EntireRow.Font.Size := 12;
  oSheet.Range['A2','A2'].EntireRow.Font.FontStyle := fsBold;
  oSheet.Range['A2','A2'].EntireRow.Font.Name := 'Arabic Transparent';
  oSheet.Range['A2','H2'].HorizontalAlignment := xlHAlignCenter;
}
{
//Change the font properties of a column.
oSheet.Range['A1','C1'].EntireColumn.Font.Color := clBlue;

//Change Cells color of a row.
oSheet.Range['A1', 'A1'].EntireRow.Interior.Color := clNavy;

//Change Cells color of a column.
oSheet.Range['C1', 'C1'].EntireColumn.Interior.Color := clYellow;

//Align a column.
oSheet.Range['A1','A1'].HorizontalAlignment := xlHAlignLeft;

//Set a column with manually.
// oSheet.Columns.Range['A1','A1'].ColumnWidth := 16;
}
//Auto fit all columns.
oSheet.Columns.AutoFit;


DeleteFile(sFile);

Sleep(2000);

oSheet.SaveAs(sFile);
//oSheet.Disconnect;
//oSheet.Free;

//oWorkbook.Disconnect;
//oWorkbook.Free;

//oExcel.Quit;
//oExcel.Disconnect;
//oExcel.Free;
end;



procedure TForm6.FormShow(Sender: TObject);
begin
  ADOQuerySelect.Open;
  ADOQueryCall.Open;
  ADOQuery1.ACtive := True;
  ADOQuery3.Active := True;
  ADOQuery4.Active := True;
  if otag = '0' then
    Form6.PageControl1.ActivePageIndex := 0 else
    Form6.PageControl1.ActivePageIndex := 1;
  otag := '';
  aqs := ADOQuerySelect.SQL.Text;
end;

procedure TForm6.ToolButton1Click(Sender: TObject);   // Сформировать отчет
var
  dat,da:string;
begin
if PageControl1.ActivePageIndex = 0 then
begin
 dat:=FormatDateTime('mm', DateTimePicker1.Date)+'/'+FormatDateTime('dd',DateTimePicker1.Date)+'/'+FormatDateTime('yyyy',DateTimePicker1.Date);
 da:=FormatDateTime('mm', DateTimePicker2.Date)+'/'+FormatDateTime('dd',DateTimePicker2.Date)+'/'+FormatDateTime('yyyy',DateTimePicker2.Date);
    ADOQuery1.close;
    ADOQuery1.SQL.Clear;
    ADOQuery1.SQl.add('SELECT Дата_заказа AS Дата, Sum(Оплачено_Заказ) AS Выручка FROM Заказы WHERE (дата_заказа between #'+dat+'# and #'+da+'#) GROUP BY Дата_заказа');
    if ComboBox4.Text <> '' then
      ADOQuery1.SQL.Add(' ORDER BY +' + ComboBox4.Text);
    ADOQuery1.Open;
  if ComboBox5.Text <> '' then   // По услуге
  begin
    ADOQuery1.SQL.Clear;
    ADOQuery1.SQL.Add('SELECT  Sum(Оплачено_Заказ) AS Выручка, Услуги.Имя_услуга ');
    ADOQuery1.SQL.Add('FROM Заказы, Услуги');
    ADOQuery1.SQL.Add(' WHERE(дата_заказа between #'+dat+'# and #'+da+'#)');
    ADOQuery1.SQL.Add(' AND (Услуги.id_услуга = Заказы.id_услуга ) AND (Имя_услуга = ''' + ComboBox5.Text+ ''')');
    ADOQuery1.SQL.Add(' GROUP BY  Имя_услуга');
    if ComboBox4.Text <> '' then
      ADOQuery1.SQL.Add(' ORDER BY ' + ComboBox4.Text);
    try
        ADOQuery1.Open;
    except

    end;
  end;


  ///////////////////////////
  ADOQuery2.close;
  ADOQuery2.SQL.Clear;
  ADOQuery2.SQl.add('SELECT SUM(Оплачено_Заказ) AS Выручка FROM Заказы WHERE (дата_заказа between #'+dat+'# and #'+da+'#)');
  ADOQuery2.Open;
  Label8.Caption := ADOQuery2.FieldByName('Выручка').Text;

///////////////////////
with DBGrid1.Columns do
  begin
   try
   begin
    Items[0].Width := 75;
    Items[1].Width := 135;
    Items[2].Width := 135;
    Items[3].Width := 135;
    Items[4].Width := 75;
    Items[5].Width := 60;
    Items[6].Width := 100;
    Items[7].Width := 100;
   end;
  except

  end;
  end;
end;
  if PageControl1.ActivePageIndex = 2 then // Отбор данных  .......
  begin
    dat:=FormatDateTime('mm', DateTimePicker7.Date)+'/'+FormatDateTime('dd',DateTimePicker7.Date)+'/'+FormatDateTime('yyyy',DateTimePicker7.Date);
    da:=FormatDateTime('mm', DateTimePicker8.Date)+'/'+FormatDateTime('dd',DateTimePicker8.Date)+'/'+FormatDateTime('yyyy',DateTimePicker8.Date);
    ADOQuerySelect.Close;
    ADOQuerySelect.SQL.Clear;
    ADOQuerySelect.SQL.Text := aqs;
   ADOQuerySelect.SQL.Add(' AND (дата_заказа between #'+dat+'# and #'+da+'#)');
if ComboBox6.Text <> '' then
begin
  ADOQuerySelect.SQL.Add(' AND (Имя_услуга = ''' + ComboBox6.Text+ ''')');
end;
    if ComboBox8.Text <> '' then
    begin
     ADOQuerySelect.SQL.Add(' AND (Клиенты.Фамилия = ''' + ComboBox8.Text + ''')');
    end;
if ComboBox9.Text <> '' then
  ADOQuerySelect.SQL.Add(' ORDER BY ' + ComboBox9.Text);

     // ADOQuerySelect.Open;
     ADOQuerySelect.Open;
  with DBGrid2.Columns do
  begin
  try
  begin
        Items[0].Width := 25;
        Items[1].Width := 135;
        Items[2].Width := 135;
        Items[3].Width := 135;
        Items[4].Width := 75;
        Items[5].Width := 60;
        Items[6].Width := 100;
        Items[7].Width := 100;
  end;
  except

  end;
  end;
  end;
  if PageControl1.ActivePageIndex = 1 then // СПРОС
  begin
  if Combobox3.Text <> '' then
  begin
    dat:=FormatDateTime('mm', DateTimePicker6.Date)+'/'+FormatDateTime('dd',DateTimePicker6.Date)+'/'+FormatDateTime('yyyy',DateTimePicker6.Date);
    da:=FormatDateTime('mm', DateTimePicker5.Date)+'/'+FormatDateTime('dd',DateTimePicker5.Date)+'/'+FormatDateTime('yyyy',DateTimePicker5.Date);
    ADOQueryCall.Close;
    ADOQueryCall.SQL.Clear;
    ADOQueryCall.SQL.Add('SELECT  COUNT(*) AS [Количество заказов] , Услуги.Имя_услуга');
    ADOQueryCall.SQL.Add('FROM Заказы, Услуги, Клиенты');
    ADOQueryCall.SQL.Add('WHERE (Услуги.id_услуга = Заказы.id_услуга ) AND (Клиенты.id_клиент = Заказы.id_Клиент) ');
    ADOQueryCall.SQL.Add(' AND (Клиенты.Фамилия = ''' + Combobox3.Text +  ''')');
    ADOQueryCall.SQL.Add('GROUP BY Имя_услуга, Фамилия');
    if CombOBox2.Text <> '' then
      ADOQueryCall.SQL.Add( 'ORDER BY ' + ComboBox2.Text);
      ADOQueryCall.SQL.SaveToFile('1.txt');
    ADOQueryCall.Open;
  end else
  begin
    dat:=FormatDateTime('mm', DateTimePicker6.Date)+'/'+FormatDateTime('dd',DateTimePicker6.Date)+'/'+FormatDateTime('yyyy',DateTimePicker6.Date);
    da:=FormatDateTime('mm', DateTimePicker5.Date)+'/'+FormatDateTime('dd',DateTimePicker5.Date)+'/'+FormatDateTime('yyyy',DateTimePicker5.Date);
    ADOQueryCall.Close;
    ADOQueryCall.SQL.Clear;
    ADOQueryCall.SQL.Add('SELECT  COUNT(*) AS [Количество заказов] , Услуги.Имя_услуга ');
    ADOQueryCall.SQL.Add('FROM Заказы, Услуги');
    ADOQueryCall.SQL.Add('WHERE (Услуги.id_услуга = Заказы.id_услуга )');
    ADOQueryCall.SQL.Add(' AND (дата_заказа between #'+dat+'# and #'+da+'#)');
    ADOQueryCall.SQL.Add(' GROUP BY Имя_услуга');
    if CombOBox2.Text <> '' then
      ADOQueryCall.SQL.Add( 'ORDER BY ' + ComboBox2.Text);
    ADOQueryCall.Open;
  end;
  ///////////////////////
with DBGrid3.Columns do
  begin
   try
   begin
    Items[0].Width := 75;
    Items[1].Width := 200;
   end;
  except

  end;
  end;
  end;
end;

procedure TForm6.ToolButton2Click(Sender: TObject);
var
  gcd: string;

begin
  if PageControl1.ActivePageIndex = 0 then
  begin
   // gcd := GetCurrentDir + '\Отчет\1.XLS';
  // ExportToExcel(DBGrid1.DataSource.DataSet,gcd);
  ExportDBGrid(True);
  end;
  if PageControl1.ActivePageIndex = 1 then
    ExportDBGrid2(True);
  if PageControl1.ActivePageIndex = 2 then
    ExportDBGrid3(True);
end;

procedure TForm6.ToolButton3Click(Sender: TObject);    // Диаграммы
begin
if PageControl1.ActivePageIndex = 0 then
begin
    with form8.series1 do
begin
  datasource := ADOquery1;
  xlabelssource:='Дата';
  YValues.Valuesource:='Выручка';
  checkdatasource;
end;
  Form8.DBChart1.Title.Text[0] := 'Выручка за период с ' + DateToStr(DateTimePicker1.Date) + ' по ' + DateToStr(DateTimePicker2.Date);
  Form8.ShowModal;
end;
if PageControl1.ActivePageIndex = 1 then
begin
  with Form17.Series1 do
  begin
    DataSource := ADOQueryCall;
    XLabelsSource := 'Имя_услуга';
    YValues.ValueSource := 'Количество заказов';
  CheckDatasource;
  end;
  Form17.DBChart1.Title.Text[0] := 'Спрос за период с ' + DateToStr(DateTimePicker6.Date) + ' по ' + DateToStr(DateTimePicker5.Date);
  Form17.ShowModal;
end;

// Отбор данных диаграмма
if PageControl1.ActivePageIndex = 0 then
  begin
  with Form18.Series1 do
  begin
    DataSource := ADOQuerySelect;
    XLabelsSource :=  'Имя_услуга';
    YValues.ValueSource := 'Оплачено';
    CheckDatasource;
  end;
    Form18.DBChart1.Title := 'Отбор данных';
    Form18.ShowModal;
  end;

end;

end.
